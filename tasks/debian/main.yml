---

- name: Apache | Debian | Install apache
  ansible.builtin.apt:
    name: "{{ packages.apache }}"
    state: present

- name: Apache | Debian | Checking if all sites exist (1/2)
  ansible.builtin.stat:
    path: "/etc/apache2/sites-available/site_{{ item.key | safe_key }}.conf"
  register: sites_exist_raw
  with_dict: "{{ APACHE_CONFIG.sites }}"

- name: Apache | Debian | Checking if all sites exist (2/2)
  ansible.builtin.set_fact:
    sites_exist: "{{ sites_exist_raw | json_query('[*].results.stat.exists') | all_true }}"

- name: Apache | Debian | Getting certificate via LetsEncrypt
  ansible.builtin.import_tasks: letsencrypt/main.yml
  when: >
    (APACHE_CONFIG.ssl.renew or
    not sites_exist) and
    APACHE_CONFIG.ssl.mode == 'letsencrypt'

- name: Apache | Debian | Enabling apache modules
  community.general.apache2_module:
    state: present
    name: "{{ item }}"
  when: item not in APACHE_CONFIG.modules.absent
  loop: "{{ APACHE_CONFIG.modules.present }}"

- name: Apache | Debian | Disabling apache modules
  community.general.apache2_module:
    state: absent
    name: "{{ item }}"
  loop: "{{ APACHE_CONFIG.modules.absent }}"

# todo: configure module settings

# todo: check if apache2.conf editing is still needed
#- name: Apache | Debian | Adding global config
#  ansible.builtin.blockinfile:
#    path: '/etc/apache2/apache2.conf'
#    block: |
#      {% for setting, value in apache_config_additions_default.items() %}
#        {{ setting }} {{ value }}
#      {% endfor %}
#      {% for setting, value in apache_config_additions.items() %}
#        {{ setting }} {{ value }}
#      {% endfor %}
#    marker: "# {mark} ANSIBLE MANAGED BLOCK - global config"
#    validate: 'apachectl -t -f %s'

- name: Apache | Debian | Disabling default apache sites
  ansible.builtin.file:
    state: absent
    dest: "/etc/apache2/sites-enabled/{{ item }}"
  with_items:
    - '000-default.conf'
    - 'default-ssl.conf'

- name: Apache | Debian | Removing apache site
  ansible.builtin.include_tasks: rm_site.yml
  vars:
    site: "{{ default_site_config | combine(site_item, recursive=true) }}"
    name: "{{ site_item.key | safe_key }}"
  when: site_item.state | default('present') != 'present'
  loop_control:
    loop_var: site_item
  with_dict: "{{ APACHE_CONFIG.sites }}"

- name: Apache | Debian | Reloading apache
  ansible.builtin.systemd:
    name: 'apache2.service'
    state: reloaded
  tags: [base, config, sites, certs]

- name: Apache | Debian | Adding apache site
  ansible.builtin.include_tasks: add_site.yml
  vars:
    site: "{{ default_site_config | combine(site_item, recursive=true) }}"
    name: "{{ site_item.key | safe_key }}"
  when: site_item.state | default('present') == 'present'
  loop_control:
    loop_var: site_item
  with_dict: "{{ APACHE_CONFIG.sites }}"

- name: Apache | Debian | Starting/Enabling apache
  ansible.builtin.systemd:
    name: 'apache2.service'
    enabled: yes
    state: started
  tags: [base]

- name: Apache | Debian | Reloading apache
  ansible.builtin.systemd:
    name: 'apache2.service'
    enabled: yes
    state: reloaded
  tags: [base, config, sites, certs]
